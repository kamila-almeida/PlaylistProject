{
  "openapi": "3.0.1",
  "info": {
    "title": "Playlist API - V1",
    "version": "v1"
  },
  "paths": {
    "/api/playlists/{id}": {
      "get": {
        "tags": [
          "Playlists"
        ],
        "summary": "Get a playlist by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the playlist by the requested id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist"
                }
              }
            }
          },
          "400": {
            "description": "If the given id is equal or less than 0"
          },
          "404": {
            "description": "If no playlist is found for the requested id"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      },
      "put": {
        "tags": [
          "Playlists"
        ],
        "summary": "Update a playlist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Playlist"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Playlist"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Playlist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the playlist is updated"
          },
          "400": {
            "description": "If the playlist values are invalid"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      },
      "delete": {
        "tags": [
          "Playlists"
        ],
        "summary": "Delete a playlist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the playlist is deleted"
          },
          "400": {
            "description": "If the given id is equal or less than 0"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      }
    },
    "/api/playlists": {
      "get": {
        "tags": [
          "Playlists"
        ],
        "summary": "Get all the playlists",
        "responses": {
          "200": {
            "description": "Returns all the playlists",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Playlist"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Playlist"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Playlist"
                  }
                }
              }
            }
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      },
      "post": {
        "tags": [
          "Playlists"
        ],
        "summary": "Create a playlist",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Playlist"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Playlist"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Playlist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the id of the playlist created",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "If the playlist values are invalid"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      }
    },
    "/api/playlists/{id}/songs": {
      "post": {
        "tags": [
          "Playlists"
        ],
        "summary": "Create a relationship between song and playlist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SongPlaylist"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SongPlaylist"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SongPlaylist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "if the relationship is created"
          },
          "400": {
            "description": "If the given id is equal or less than 0"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      },
      "get": {
        "tags": [
          "Playlists"
        ],
        "summary": "Get the songs by playlist id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the songs by the requested playlist id",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Song"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Song"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Song"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the given id is equal or less than 0"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      }
    },
    "/api/playlists/{id}/songs/{songId}": {
      "delete": {
        "tags": [
          "Playlists"
        ],
        "summary": "Delete the relationship between song and playlist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "songId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the relationship is deleted"
          },
          "400": {
            "description": "If the given ids are equal or less than 0"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      }
    },
    "/api/songs/{id}": {
      "get": {
        "tags": [
          "Songs"
        ],
        "summary": "Get a song by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the song by the requested id"
          },
          "400": {
            "description": "If the given id is equal or less than 0"
          },
          "404": {
            "description": "If no song is found for the requested id"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      },
      "put": {
        "tags": [
          "Songs"
        ],
        "summary": "Update a song",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Song"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Song"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Song"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the song is updated"
          },
          "400": {
            "description": "If the song values are invalid"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      },
      "delete": {
        "tags": [
          "Songs"
        ],
        "summary": "Delete a song",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the song is deleted"
          },
          "400": {
            "description": "If the given id is equal or less than 0"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      }
    },
    "/api/songs": {
      "get": {
        "tags": [
          "Songs"
        ],
        "summary": "Get all the songs",
        "responses": {
          "200": {
            "description": "Returns all the songs"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      },
      "post": {
        "tags": [
          "Songs"
        ],
        "summary": "Create a song",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Song"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Song"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Song"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the id of the song created"
          },
          "400": {
            "description": "If the song values are invalid"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      }
    },
    "/api/songs/{id}/playlists": {
      "post": {
        "tags": [
          "Songs"
        ],
        "summary": "Create a relationship between song and playlist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SongPlaylist"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SongPlaylist"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SongPlaylist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "if the relationship is created"
          },
          "400": {
            "description": "If the given id is equal or less than 0"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      },
      "get": {
        "tags": [
          "Songs"
        ],
        "summary": "Get the playlists by song id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the playlists by the requested song id",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Playlist"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Playlist"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Playlist"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the given id is equal or less than 0"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      }
    },
    "/api/songs/{id}/playlists/{playlistId}": {
      "delete": {
        "tags": [
          "Songs"
        ],
        "summary": "Delete the relationship between song and playlist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "playlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the relationship is deleted"
          },
          "400": {
            "description": "If the given ids are equal or less than 0"
          },
          "500": {
            "description": "If an internal server error occurs"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Playlist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Song": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "author": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SongPlaylist": {
        "type": "object",
        "properties": {
          "songId": {
            "type": "integer",
            "format": "int32"
          },
          "playlistId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    }
  }
}